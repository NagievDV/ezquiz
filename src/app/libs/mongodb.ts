import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI as string;

if (!MONGODB_URI) {
  throw new Error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç MONGODB_URI –≤ .env");
}

let isConnecting = false;
let connectionError: Error | null = null;

export const connectDB = async (): Promise<void> => {
  // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  if (mongoose.connection.readyState >= 1) {
    return;
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  if (connectionError) {
    console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...");
    connectionError = null;
  }

  // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∂–¥–µ–º
  if (isConnecting) {
    await new Promise(resolve => setTimeout(resolve, 1000));
    return connectDB();
  }

  try {
    isConnecting = true;
    await mongoose.connect(MONGODB_URI, {
      dbName: "db",
      serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
      socketTimeoutMS: 45000, // –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
      connectTimeoutMS: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    });
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB");
    isConnecting = false;
  } catch (error) {
    isConnecting = false;
    connectionError = error as Error;
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error);
    throw new Error(
      `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : String(error)}`
    );
  }
};
